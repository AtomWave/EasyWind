.products {
	list-style: none;
	// margin: 0 -20px 0 0;
	padding: 0;
}
.clearfix {
	display: flex;
	justify-content: center;
	width: 100%;
	flex-wrap: wrap;
	padding: 0 0 0 20px;
}
.product-wrapper {
	// display: block;
	width: 30%;
	// float: left;
	transition: width 0.2s;
}
.product {
	display: block;
	border: 1px solid #b5e9a7;
	border-radius: 3px;
	position: relative;
	background: #fff;
	margin: 0 20px 20px 0;
	text-decoration: none;
	color: #474747;
	z-index: 0;
	height: 300px;
}
.product-photo {
	position: relative;
	padding-bottom: 100%;
	overflow: hidden;
	img {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		max-width: 100%;
		max-height: 100%;
		margin: auto;
		transition: transform 0.4s ease-out;
	}
}

//========================================================================================================================================================

/* Здесь начинается наша карусель с основной оболочкой
относительно позиционированы, так что наши абсолютно позиционированные элементы
В правильном месте.*/
.carousel-wrapper {
	position: relative;
	height: 400px;
	width: 30%;
	/* Наши абсолютно позиционированные элементы карусели охватывают ширину и
   высота своего родителя. Мы делаем их прозрачными по умолчанию, поэтому
   что они исчезают, когда мы прокручиваем их, используя ссылки со стрелками. */
	.carousel-item {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		// padding: 25px 50px;
		opacity: 0;
		transition: all 0.5s ease-in-out;
		width: 100%;
		img {
			width: 100%;
		}

		/* Вы заметили отступ слева и справа на 50 пикселей вверху? Это так
     мы можем расположить наши стрелочные ссылки! Каждый из них будет шириной 50 пикселей. Также,
     Я использую пустые ссылки с фоновым изображением, чтобы ссылки
     похожи на стрелки. Убедитесь, что вы заменили этот URL-адрес фактическим
     URL, чтобы ваши ссылки со стрелками были не просто прозрачными прямоугольниками. */
		.arrow {
			position: absolute;
			top: 0;
			display: block;
			width: 50px;
			height: 100%;
			-webkit-tap-highlight-color: rgba(0, 0, 0, 0);
			background: url("../img/icons/arrow-prev.png") 50% 50% / 20px no-repeat;
			z-index: 10;

			/* Поместим нашу стрелку, чтобы вернуться влево.  */
			&.arrow-prev {
				left: 20px;
			}

			/* И наша стрелка идти вперед справа. Так как я использую
       одно и то же изображение стрелки для обеих моих стрелок, я поворачиваю это на
       на 180 градусов, чтобы он указывал в правильном направлении  */
			&.arrow-next {
				right: 20px;
				-webkit-transform: rotate(180deg);
				transform: rotate(180deg);
			}
		}

		/* Мне очень нравится, как эти элементы карусели выглядят на темном изображении
     фон, поэтому, если элемент div .carousel имеет класс «свет»,
     мы сделаем его цвет текста белым и используем белую стрелку вместо
     темно-серый. Опять же, убедитесь, что это изображение стрелки существует где-то */
		&.light {
			color: white;

			.arrow {
				background: url("../img/icons/arrow-light.png") 50% 50% / 20px no-repeat;
			}
		}

		/* Используем некоторые медиа-запросы для изменения размера стрелок
     на небольших устройствах.*/
		@media (max-width: 480px) {
			.arrow,
			&.light .arrow {
				background-size: 10px;
				background-position: 10px 50%;
			}
		}
	}

	/* Давайте установим для нашей ссылки перехода цель display: none;, чтобы не
  чтобы браузер переходил к верхней части карусели всякий раз, когда пользователь
  нажимает на одну из наших ссылок со стрелками. Этот селектор атрибутов будет нацелен на
  любой элемент, чей id начинается с 'target-item'.*/
	[id^="target-item"] {
		display: none;
	}

	/* Давайте установим цели для нашей ссылки для перехода display: none; так что мы не
   заставлять браузер переходить к началу карусели всякий раз, когда пользователь
   нажимает на одну из наших ссылок со стрелками. Этот селектор атрибутов будет нацелен
   любой элемент, идентификатор которого начинается с «целевой элемент». */
	.item-1 {
		z-index: 2;
		opacity: 1;
	}

	/* Но мы не хотим, чтобы первый элемент ВСЕГДА был opacity: 1; в противном случае
   он проглядывал бы при циклическом переключении между элементами два и выше.  */
	*:target ~ .item-1 {
		opacity: 0;
	}

	/* ...но если целью является #target-item-1, нам нужен первый элемент
   для отображения, поэтому мы выбираем его с помощью селектора ~ sibling и
   снова установив его непрозрачность на 1 :-) */
	#target-item-1:target ~ .item-1 {
		opacity: 1;
	}

	/* Если целью является какой-либо другой target-item-#, давайте выберем его с помощью родственного элемента
   селектор, сделайте так, чтобы он исчезал, и поместите его поверх стопки, используя z-index: 3.
   Здесь вы можете добавить дополнительные целевые элементы, если в вашей карусели более трех
   предметы. Возможно, стоит сразу добавить около 10 пунктов.  */
	#target-item-2:target ~ .item-2,
	#target-item-3:target ~ .item-3 {
		z-index: 3;
		opacity: 1;
	}
}
